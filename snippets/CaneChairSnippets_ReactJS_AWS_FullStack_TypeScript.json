{
	"ReactJS_AWS_TS_Index.tsx": {
		"prefix": "ccReactJS_AWS_TS_index.tsx",
		"body": [
			"import './index.css';",
			"import '@fontsource/roboto';",
			"",
			"import Amplify from 'aws-amplify';",
			"import React from 'react';",
			"import ReactDOM from 'react-dom';",
			"import { Provider as ReduxProvider } from 'react-redux';",
			"import { BrowserRouter } from 'react-router-dom';",
			"",
			"import App from './App';",
			"import config from './aws-exports';",
			"import { reduxStore } from './Redux/store';",
			"import reportWebVitals from './reportWebVitals';",
			"",
			"Amplify.configure(config);",
			"",
			"require('dotenv').config();",
			"",
			"ReactDOM.render(",
			"\t<ReduxProvider store={reduxStore}>",
			"\t\t<BrowserRouter>",
			"\t\t\t<App />",
			"\t\t</BrowserRouter>",
			"\t</ReduxProvider>,",
			"\tdocument.getElementById('root'),",
			");",
			"",
			"reportWebVitals();",
			""
		],
		"description": "Create index.tsx file"
	},
	"ReactJS_AWS_TS_ReduxStore.ts": {
		"prefix": "ccReactJS_AWS_TS_ReduxStore.ts",
		"body": [
			"import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';",
			"",
			"import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';",
			"",
			"type CounterStateType = {",
			"\tvalue: number;",
			"};",
			"",
			"const initialCounterState = { value: 0 } as CounterStateType;",
			"",
			"const counterSlice = createSlice({",
			"\tname: 'counter',",
			"\tinitialState: initialCounterState,",
			"\treducers: {",
			"\t\tincrement(state: { value: number }) {",
			"\t\t\tstate.value++;",
			"\t\t},",
			"\t\tdecrement(state: { value: number }) {",
			"\t\t\tstate.value--;",
			"\t\t},",
			"\t\tincrementByAmount(state: { value: number }, action: PayloadAction<number>) {",
			"\t\t\tstate.value += action.payload;",
			"\t\t},",
			"\t},",
			"});",
			"",
			"export const { increment, decrement, incrementByAmount } = counterSlice.actions;",
			"// export default counterSlice.reducer;",
			"",
			"export const reduxStore = configureStore({",
			"\treducer: {",
			"\t\tcounter: counterSlice.reducer,",
			"\t},",
			"});",
			"",
			"export type RootState = ReturnType<typeof reduxStore.getState>;",
			"export type AppDispatch = typeof reduxStore.dispatch;",
			"export const useAppDispatch = () => useDispatch<AppDispatch>();",
			"export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;",
			""
		],
		"description": "Create a Redux Store file."
	},
	"ReactJS_AWS_TS_Component_BasicCRUD": {
		"prefix": "ccReactJS_AWS_TS_BasicCRUDComponent",
		"body": [
			"import { useFormik } from 'formik';",
			"import React, { useEffect } from 'react';",
			"import * as Yup from 'yup';",
			"",
			"import { Button, TextField } from '@material-ui/core';",
			"",
			"import { useAppDispatch, useAppSelector } from '../Redux/store';",
			"import {",
			"\tTable,",
			"\tTableBody,",
			"\tTableCell,",
			"\tTableContainer,",
			"\tTableHead,",
			"\tTableRow,",
			"} from '../styledComponents/Table';",
			"import {",
			"\taddNew${1:__ComponentName__},",
			"\tdelete${1:__ComponentName__},",
			"\tfetch${1:__ComponentName__}List,",
			"\tupdate${1:__ComponentName__},",
			"} from './${1/^(.)(.*)$/${1:/downcase}${2}/}Slice';",
			"",
			"interface ${1:__ComponentName__}ManagementProps {}",
			"",
			"export const ${1:__ComponentName__}Management = (props: ${1:__ComponentName__}ManagementProps) => {",
			"\tconst [enabledRow, setEnabledRow] = React.useState<any>();",
			"\tconst ${1/^(.)(.*)$/${1:/downcase}${2}/}List = useAppSelector((state) => state.${1/^(.)(.*)$/${1:/downcase}${2}/}.${1/^(.)(.*)$/${1:/downcase}${2}/}List);",
			"\tconst dispatch = useAppDispatch();",
			"",
			"\tuseEffect(() => {",
			"\t\tif (${1/^(.)(.*)$/${1:/downcase}${2}/}List.length === 0) {",
			"\t\t\tdispatch(fetch${1:__ComponentName__}List());",
			"\t\t}",
			"\t}, []); // eslint-disable-line react-hooks/exhaustive-deps",
			"",
			"\tconst initialValues = {",
			"\t\tname: '',",
			"\t\tdescription: '',",
			"\t};",
			"\tconst validationSchema = Yup.object({",
			"\t\tname: Yup.string().required('required'),",
			"\t});",
			"\tconst onSubmit = async (values: any) => {",
			"\t\tdispatch(addNew${1:__ComponentName__}(values));",
			"\t\tformik.resetForm();",
			"\t};",
			"",
			"\tconst formik = useFormik({",
			"\t\tinitialValues,",
			"\t\tvalidationSchema,",
			"\t\tonSubmit,",
			"\t});",
			"",
			"\tlet initialValues_modifyForm = {",
			"\t\tname: '',",
			"\t\tdescription: '',",
			"\t};",
			"\tconst validationSchema_modifyForm = Yup.object({",
			"\t\tname: Yup.string().required('required'),",
			"\t});",
			"\tconst onSubmit_modifyForm = async (values: any) => {",
			"\t\tconst input = {",
			"\t\t\tid: values.id,",
			"\t\t\tname: values.name,",
			"\t\t\tdescription: values.description,",
			"\t\t};",
			"\t\tdispatch(update${1:__ComponentName__}(input));",
			"\t\tsetEnabledRow(undefined);",
			"\t};",
			"",
			"\tconst formik_modifyForm = useFormik({",
			"\t\tinitialValues: initialValues_modifyForm,",
			"\t\tvalidationSchema: validationSchema_modifyForm,",
			"\t\tonSubmit: onSubmit_modifyForm,",
			"\t});",
			"",
			"\tconst onButtonClick_update = (row: any) => {",
			"\t\tsetEnabledRow(row);",
			"\t\tformik_modifyForm.setValues(row);",
			"\t};",
			"",
			"\tconst onButtonClick_delete = (id: string) => {",
			"\t\tdispatch(delete${1:__ComponentName__}({id}));",
			"\t};",
			"",
			"\tconst onButtonClick_cancel = () => {",
			"\t\tsetEnabledRow(undefined);",
			"\t};",
			"",
			"\treturn (",
			"\t\t<>",
			"\t\t\t<h1>${1:__ComponentName__}Management</h1>",
			"\t\t\t<form onSubmit={formik.handleSubmit}>",
			"\t\t\t\t<TextField",
			"\t\t\t\t\tid='name'",
			"\t\t\t\t\tname='name'",
			"\t\t\t\t\tlabel='Name'",
			"\t\t\t\t\tvalue={formik.values.name}",
			"\t\t\t\t\tonChange={formik.handleChange}",
			"\t\t\t\t\terror={formik.touched.name && Boolean(formik.errors.name)}",
			"\t\t\t\t\thelperText={formik.touched.name && formik.errors.name}></TextField>",
			"\t\t\t\t<TextField",
			"\t\t\t\t\tid='description'",
			"\t\t\t\t\tname='description'",
			"\t\t\t\t\tlabel='Description'",
			"\t\t\t\t\tvalue={formik.values.description}",
			"\t\t\t\t\tonChange={formik.handleChange}",
			"\t\t\t\t\terror={",
			"\t\t\t\t\t\tformik.touched.description && Boolean(formik.errors.description)",
			"\t\t\t\t\t}",
			"\t\t\t\t\thelperText={",
			"\t\t\t\t\t\tformik.touched.description && formik.errors.description",
			"\t\t\t\t\t}></TextField>",
			"",
			"\t\t\t\t<Button type='submit' color='primary' variant='contained'>",
			"\t\t\t\t\tAdd",
			"\t\t\t\t</Button>",
			"\t\t\t</form>",
			"\t\t\t<h2>${1:__ComponentName__}Management List（{`${${1/^(.)(.*)$/${1:/downcase}${2}/}List.length}`}）</h2>",
			"\t\t\t<TableContainer>",
			"\t\t\t\t<Table>",
			"\t\t\t\t\t<TableHead>",
			"\t\t\t\t\t\t<TableRow>",
			"\t\t\t\t\t\t\t<TableCell>Name</TableCell>",
			"\t\t\t\t\t\t\t<TableCell>Description</TableCell>",
			"\t\t\t\t\t\t\t<TableCell>Created At</TableCell>",
			"\t\t\t\t\t\t\t<TableCell>Edit</TableCell>",
			"\t\t\t\t\t\t</TableRow>",
			"\t\t\t\t\t</TableHead>",
			"\t\t\t\t\t<TableBody>",
			"\t\t\t\t\t\t{${1/^(.)(.*)$/${1:/downcase}${2}/}List.map((item) => {",
			"\t\t\t\t\t\t\tif (enabledRow !== item) {",
			"\t\t\t\t\t\t\t\treturn (",
			"\t\t\t\t\t\t\t\t\t<TableRow key={item.id}>",
			"\t\t\t\t\t\t\t\t\t\t<TableCell>{item.name}</TableCell>",
			"\t\t\t\t\t\t\t\t\t\t<TableCell>{item.description}</TableCell>",
			"\t\t\t\t\t\t\t\t\t\t<TableCell>{item.createdAt}</TableCell>",
			"\t\t\t\t\t\t\t\t\t\t<TableCell>",
			"\t\t\t\t\t\t\t\t\t\t\t<Button",
			"\t\t\t\t\t\t\t\t\t\t\t\tcolor='primary'",
			"\t\t\t\t\t\t\t\t\t\t\t\tvariant='contained'",
			"\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onButtonClick_update(item)}>",
			"\t\t\t\t\t\t\t\t\t\t\t\tModify",
			"\t\t\t\t\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t\t\t\t\t\t<Button",
			"\t\t\t\t\t\t\t\t\t\t\t\tcolor='secondary'",
			"\t\t\t\t\t\t\t\t\t\t\t\tvariant='outlined'",
			"\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tonButtonClick_delete(item.id);",
			"\t\t\t\t\t\t\t\t\t\t\t\t}}>",
			"\t\t\t\t\t\t\t\t\t\t\t\tDelete",
			"\t\t\t\t\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t\t\t\t\t</TableCell>",
			"\t\t\t\t\t\t\t\t\t</TableRow>",
			"\t\t\t\t\t\t\t\t);",
			"\t\t\t\t\t\t\t} else {",
			"\t\t\t\t\t\t\t\treturn (",
			"\t\t\t\t\t\t\t\t\t<form onSubmit={formik_modifyForm.handleSubmit} key={item.id}>",
			"\t\t\t\t\t\t\t\t\t\t<TableRow>",
			"\t\t\t\t\t\t\t\t\t\t\t<TableCell>",
			"\t\t\t\t\t\t\t\t\t\t\t\t<TextField",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tid='name'",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tname='name'",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tlabel='Name'",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={formik_modifyForm.values.name}",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={formik_modifyForm.handleChange}",
			"\t\t\t\t\t\t\t\t\t\t\t\t\terror={",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t\tformik_modifyForm.touched.name &&",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t\tBoolean(formik_modifyForm.errors.name)",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t}",
			"\t\t\t\t\t\t\t\t\t\t\t\t\thelperText={",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t\tformik_modifyForm.touched.name &&",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t\tformik_modifyForm.errors.name",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t}></TextField>",
			"\t\t\t\t\t\t\t\t\t\t\t</TableCell>",
			"\t\t\t\t\t\t\t\t\t\t\t<TableCell>",
			"\t\t\t\t\t\t\t\t\t\t\t\t<TextField",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tid='description'",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tname='description'",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tlabel='Description'",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={formik_modifyForm.values.description}",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={formik_modifyForm.handleChange}",
			"\t\t\t\t\t\t\t\t\t\t\t\t\terror={",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t\tformik_modifyForm.touched.description &&",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t\tBoolean(formik_modifyForm.errors.description)",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t}",
			"\t\t\t\t\t\t\t\t\t\t\t\t\thelperText={",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t\tformik_modifyForm.touched.description &&",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t\tformik_modifyForm.errors.description",
			"\t\t\t\t\t\t\t\t\t\t\t\t\t}></TextField>",
			"\t\t\t\t\t\t\t\t\t\t\t</TableCell>",
			"\t\t\t\t\t\t\t\t\t\t\t<TableCell>{item.createdAt}</TableCell>",
			"\t\t\t\t\t\t\t\t\t\t\t<TableCell>",
			"\t\t\t\t\t\t\t\t\t\t\t\t<Button",
			"\t\t\t\t\t\t\t\t\t\t\t\t\ttype='submit'",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tcolor='primary'",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tvariant='contained'>",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tSave",
			"\t\t\t\t\t\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t\t\t\t\t\t\t<Button",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tcolor='secondary'",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tvariant='outlined'",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={onButtonClick_cancel}>",
			"\t\t\t\t\t\t\t\t\t\t\t\t\tCancel",
			"\t\t\t\t\t\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t\t\t\t\t\t</TableCell>",
			"\t\t\t\t\t\t\t\t\t\t</TableRow>",
			"\t\t\t\t\t\t\t\t\t</form>",
			"\t\t\t\t\t\t\t\t);",
			"\t\t\t\t\t\t\t}",
			"\t\t\t\t\t\t})}",
			"\t\t\t\t\t</TableBody>",
			"\t\t\t\t</Table>",
			"\t\t\t</TableContainer>",
			"\t\t</>",
			"\t);",
			"};",
			""
		],
		"description": "Create a Component with basic CRUD"
	},
	"ReactJS_AWS_TS_Redux_Slice": {
		"prefix": "ccReactJS_AWS_TS_Redux_Slice",
		"body": [
			"import {",
			"\tCreate${1:__ModelName__}Input",
			"\tDelete${1:__ModelName__}Input",
			"\tUpdate${1:__ModelName__}Input",
			"} from './../API';",
			"import { API, graphqlOperation } from 'aws-amplify';",
			"",
			"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';",
			"",
			"import { ${1:__ModelName__} } from '../API';",
			"import * as mutations from '../graphql/mutations';",
			"import * as queries from '../graphql/queries';",
			"",
			"let original${1:__ModelName__} = ''; ",
			"interface SliceState {",
			"\t${1/^(.)(.*)$/${1:/downcase}${2}/}List: ${1:__ModelName__}[];",
			"\tstatus: 'loading' | 'idle';",
			"\terror: string | null;",
			"}",
			"",
			"const initialState: SliceState = {",
			"\t${1/^(.)(.*)$/${1:/downcase}${2}/}List: [],",
			"\terror: null,",
			"\tstatus: 'idle',",
			"};",
			"",
			"export const fetch${1:__ModelName__}List = createAsyncThunk(",
			"\t'${1:__ModelName__}/fetch${1:__ModelName__}List',",
			"\tasync () => {",
			"\t\tconst response = (await API.graphql(",
			"\t\t\tgraphqlOperation(queries.list${1:__ModelName__}s),",
			"\t\t)) as any;",
			"",
			"\t\treturn response.data.list${1:__ModelName__}s;",
			"\t},",
			");",
			"",
			"export const addNew${1:__ModelName__} = createAsyncThunk(",
			"\t'${1:__ModelName__}/addNew${1:__ModelName__}',",
			"\tasync (input: Create${1:__ModelName__}Input, { rejectWithValue }) => {",
			"\t\ttry {",
			"\t\t\tconst response = (await API.graphql(",
			"\t\t\t\tgraphqlOperation(mutations.create${1:__ModelName__}, { input }),",
			"\t\t\t)) as any;",
			"\t\t\treturn response.data.create${1:__ModelName__};",
			"\t\t} catch (err) {",
			"\t\t\tconsole.error(`err:`, err);",
			"\t\t\treturn rejectWithValue(err.response.data);",
			"\t\t}",
			"\t},",
			");",
			"",
			"export const update${1:__ModelName__} = createAsyncThunk(",
			"\t'${1:__ModelName__}s/update${1:__ModelName__}',",
			"\tasync (input: Update${1:__ModelName__}Input, { rejectWithValue }) => {",
			"\t\ttry {",
			"\t\t\tconst response = (await API.graphql(",
			"\t\t\t\tgraphqlOperation(mutations.update${1:__ModelName__}, { input }),",
			"\t\t\t)) as any;",
			"\t\t\treturn response.data.update${1:__ModelName__};",
			"\t\t} catch (err) {",
			"\t\t\tconsole.error(`err:`, err);",
			"\t\t\treturn rejectWithValue(err.response.data);",
			"\t\t}",
			"\t},",
			");",
			"",
			"export const delete${1:__ModelName__} = createAsyncThunk(",
			"\t'${1:__ModelName__}s/delete${1:__ModelName__}',",
			"\tasync (id: Delete${1:__ModelName__}Input, { rejectWithValue }) => {",
			"\t\ttry {",
			"\t\t\tconst response = (await API.graphql(",
			"\t\t\t\tgraphqlOperation(mutations.delete${1:__ModelName__}, { input }),",
			"\t\t\t)) as any;",
			"\t\t\treturn response.data.delete${1:__ModelName__};",
			"\t\t} catch (err) {",
			"\t\t\tconsole.error(`err:`, err);",
			"\t\t\treturn rejectWithValue(err.response.data);",
			"\t\t}",
			"\t},",
			");",
			"",
			"const ${1/^(.)(.*)$/${1:/downcase}${2}/}Slice = createSlice({",
			"\tname: '${1/^(.)(.*)$/${1:/downcase}${2}/}',",
			"\tinitialState,",
			"\treducers: {},",
			"\textraReducers: (builder) => {",
			"\t\tbuilder",
			"\t\t\t.addCase(fetch${1:__ModelName__}List.pending, (state) => {",
			"\t\t\t\tstate.status = 'loading';",
			"\t\t\t})",
			"\t\t\t.addCase(fetch${1:__ModelName__}List.fulfilled, (state, action) => {",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = [];",
			"\t\t\t\taction.payload.items.map((item: ${1:__ModelName__}) => {",
			"\t\t\t\t\treturn state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.push(item);",
			"\t\t\t\t});",
			"\t\t\t\tstate.status = 'idle';",
			"\t\t\t})",
			"\t\t\t.addCase(fetch${1:__ModelName__}List.rejected, (rejectedInfo) => {})",
			"\t\t\t.addCase(addNew${1:__ModelName__}.pending, (state) => {",
			"\t\t\t\tstate.status = 'loading';",
			"\t\t\t})",
			"\t\t\t.addCase(addNew${1:__ModelName__}.fulfilled, (state, action) => {",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List.push(action.payload);",
			"\t\t\t\tstate.status = 'idle';",
			"\t\t\t})",
			"\t\t\t.addCase(addNew${1:__ModelName__}.rejected, (rejectedInfo) => {})",
			"\t\t\t.addCase(update${1:__ModelName__}.pending, (state, action: any) => {",
			"\t\t\t\tstate.status = 'loading';",
			"\t\t\t\toriginal${1:__ModelName__} = JSON.stringify(",
			"\t\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List.find((item) => {",
			"\t\t\t\t\t\treturn item.id === action.meta.arg.id;",
			"\t\t\t\t\t}),",
			"\t\t\t\t);",
			"",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.map((item) => {",
			"\t\t\t\t\tif (item.id === action.meta.arg.id) {",
			"\t\t\t\t\t\titem = { ...JSON.parse(original${1:__ModelName__}), ...action.meta.arg };",
			"\t\t\t\t\t}",
			"\t\t\t\t\treturn item;",
			"\t\t\t\t});",
			"\t\t\t})",
			"\t\t\t.addCase(update${1:__ModelName__}.fulfilled, (state, action: any) => {",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.map((item) => {",
			"\t\t\t\t\tif (item.id === action.meta.arg.id) {",
			"\t\t\t\t\t\titem = action.payload;",
			"\t\t\t\t\t}",
			"\t\t\t\t\treturn item;",
			"\t\t\t\t});",
			"\t\t\t\tstate.status = 'idle';",
			"\t\t\t})",
			"\t\t\t.addCase(update${1:__ModelName__}.rejected, (state, action: any) => {",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.map((item) => {",
			"\t\t\t\t\tif (item.id === JSON.parse(original${1:__ModelName__}).id) {",
			"\t\t\t\t\t\titem = JSON.parse(original${1:__ModelName__});",
			"\t\t\t\t\t}",
			"\t\t\t\t\treturn item;",
			"\t\t\t\t});",
			"\t\t\t})",
			"\t\t\t.addCase(delete${1:__ModelName__}.pending, (state) => {",
			"\t\t\t\tstate.status = 'loading';",
			"\t\t\t})",
			"\t\t\t.addCase(delete${1:__ModelName__}.fulfilled, (state, action) => {",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.filter(",
			"\t\t\t\t\t(item) => item.id !== action.meta.arg.id,",
			"\t\t\t\t);",
			"\t\t\t\tstate.status = 'idle';",
			"\t\t\t})",
			"\t\t\t.addCase(delete${1:__ModelName__}.rejected, (state, rejectedInfo) => {});",
			"\t},",
			"});",
			"export default ${1/^(.)(.*)$/${1:/downcase}${2}/}Slice.reducer;",
			""
		],
		"description": "Create a Redux Slice file"
	}
}
